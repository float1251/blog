<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>float's memo</title><link href="http://float1251.github.io/blog/" rel="alternate"></link><link href="http://float1251.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://float1251.github.io/blog/</id><updated>2015-11-19T10:35:00+09:00</updated><entry><title>2015-11-19</title><link href="http://float1251.github.io/blog/2015/11/19/2015_11_19.html" rel="alternate"></link><updated>2015-11-19T10:35:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-11-19:blog/2015/11/19/2015_11_19.html</id><summary type="html">&lt;div class="section" id="codingame"&gt;
&lt;h2&gt;codingame&lt;/h2&gt;
&lt;p&gt;とりあえず、codingameのeasyが全部終わった。&lt;/p&gt;
&lt;p&gt;javasriptでとりあえずやったので、あとでpython3, C#, C++あたりでやってみる予定。&lt;/p&gt;
&lt;p&gt;次はmediumになるのかな。まぁ肩の力ぬいてやっていこうと思う。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;ゲームつくりはじめました&lt;/h2&gt;
&lt;p&gt;以前、試作っぽいのを作ったのを本格的にやり始めることになった。&lt;/p&gt;
&lt;p&gt;企画、デザインは別の人がやるから基本的にプログラム専任。&lt;/p&gt;
&lt;p&gt;仕事に時間がとられるとこっちに時間使えないから効率的に仕事しないとね。&lt;/p&gt;
&lt;p&gt;Unityで作ってます。&lt;/p&gt;
&lt;p&gt;ラインディフェンス系のゲームになる予定。&lt;/p&gt;
&lt;p&gt;3ヶ月でどこまでやれるかって感じです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;近況&lt;/h2&gt;
&lt;p&gt;先週末くらいに博多に行ってきたけど、あまりよくなかった。&lt;/p&gt;
&lt;p&gt;別府の温泉は素晴らしかったけどね。&lt;/p&gt;
&lt;p&gt;田舎に住むのもいいかなって思った。都内は家賃高いし、食費も高いし。&lt;/p&gt;
&lt;p&gt;やはり都市圏の旅行はそこまで楽しくないので、温泉街とかリゾート地の方がいいね。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;進捗&lt;/h2&gt;
&lt;p&gt;ご確認下さい。&lt;/p&gt;
&lt;img alt="ra-men" src="https://lh3.googleusercontent.com/cW8Rz5JJXvyUnCWHOo27Fjt9xe3PuaUJtNaRn_A84-EgZPsVPIlgZ1PFez4nZeyopT8BC9bKUcbtJcTvgLu-MqB3L8Jpk0PVvaNBeweoMJIr_gbRc8kEJoJLj3adalmQE715GdIr8FwagK-a0PUOZsdZX7y-qRgQZQo2p83aOCuM42oViRgWx4265t9y8DHPybwmPNYxMTAAcMuoDcxxSaWe16_DHd4tqMuscnddSfiInwcPQxv6zQnXK3WbM9IBInanAC6XtjASrmVzY-nNjc0BgZmPGtyyQRsJEyHfNjpC8hsN2dPonDHsP8HVNcYg7gQ_916LDqAiJK9ZZ9xnpR1QdpIqkOmZhvQ5TPtGIPfhMrA3TLsk9KgIfJysToSk_EjOFSWncYuB9-KmEkTWSLPu2y0Eg_9fnP0wwRrFjeUsKx8Kd8Ux18V2ESajnFIc2dHdv0s2iKEfcnyeTPOK9wtVOSOm7wCve-zJctRmAjUhoxTjTOINVOhN99IUhz1FVHgtINynSSWbh3PQhaEwMGwA3EkK2UtNyijosuWkwVs=w1415-h796-no" /&gt;
&lt;/div&gt;
</summary><category term="memo"></category></entry><entry><title>codingameを始めてみた</title><link href="http://float1251.github.io/blog/2015/11/10/codingame_2015_11_10.html" rel="alternate"></link><updated>2015-11-10T10:14:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-11-10:blog/2015/11/10/codingame_2015_11_10.html</id><summary type="html">&lt;p&gt;C++やhaskellを覚えたいけど、取っ掛かりが欲しいと思って、codingameを始めてみた。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.codingame.com/home"&gt;https://www.codingame.com/home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tutorialとかは非常に簡単なので、全然触ったことない言語でも簡単に解ける。&lt;/p&gt;
&lt;p&gt;だいたい解けないのはルールを読んでないからというね。。。&lt;/p&gt;
&lt;p&gt;とりあえず、毎日か2日に1回くらいの割合で解いていきたい。&lt;/p&gt;
&lt;p&gt;とりあえずやる予定の言語はC++, python3, javascript, C#, Java, Haskellの予定.&lt;/p&gt;
&lt;p&gt;C#, C++, Javaと重い言語が並んでいるなぁ。。。&lt;/p&gt;
&lt;p&gt;やったら、twitterかなんかで報告しよう。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;進捗&lt;/h2&gt;
&lt;p&gt;進捗です。&lt;/p&gt;
&lt;img alt="nakamoto" src="https://lh3.googleusercontent.com/iXVXDhbi5gPQ3oB0CogHNoE-21p35200snwqMqMJ9ZBjvq8_v0gQuTYw7t8eBGrSSdqAMtTrkAeJUAlXwP49uKYuJZszUQiD1OcweXOB8GFie4JRITB0-QKj7ADKsGjMWCxKeTiJW1r6H0AAsoGMDkp3H2xYS2muCdiDbGvgmxN6PsGsWi7nN_Gxaw2JJ-CKlh4jtTXegmmAxynVb56hGWe04snCtN15HZdeF0CZ_jjG-un123PQDVG_mbNi-OIloPo7nV8z3CzEEhS9hHgmBXIx8ai-RTNAMuINIiJds_5UqhPxMlsIajComsS1Ss86CsSqkUiJsibgPKOWD8nOjlX8-VOGrGEEgUvTBs9_e2XoXSqOzrjXsaYnMl_A6qDsv9dxMisSZehCh_So1wV1lujV63L3Ze3zEzOBGVhjLveiES8zaKRKtWlLIli5I75mKDfZvAd7qNoFB384K7mFN8dlSyFNf6TmhpQ4fsmDC3ZNCRhMj4g1hRDWp8JgpJ8RxGP23yDFXBZKAs18l_WK6LNXgYAQE1slToYbU2RZqic=w1506-h848-no" /&gt;
&lt;/div&gt;
</summary><category term="programming"></category><category term="codingame"></category></entry><entry><title>2015-11-04</title><link href="http://float1251.github.io/blog/2015/11/04/2015_11_04.html" rel="alternate"></link><updated>2015-11-04T09:31:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-11-04:blog/2015/11/04/2015_11_04.html</id><summary type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;ゲーム開発&lt;/h2&gt;
&lt;p&gt;とりあえず、3月までにゲームをリリースするということを目標にやってみる。&lt;/p&gt;
&lt;p&gt;つくるゲームは2dのアクションゲーム。素材はAsset Storeで買ったからなんとかなりそう。&lt;/p&gt;
&lt;p&gt;ただ、Unityでtiledを使うのpluginは高いから自作する予定。多分ここが一番のネックな気がする。。。&lt;/p&gt;
&lt;p&gt;あと買ったAssetがtiled向けになっていないのもきつい。。。&lt;/p&gt;
&lt;p&gt;ひとまず出来るだけ毎朝少しでも活動を行うってことを継続してみようかと思う。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;登山&lt;/h2&gt;
&lt;p&gt;日曜に御岳山に行ってきた。紅葉はまだあまりしていなかった。&lt;/p&gt;
&lt;p&gt;犬を連れて来ている人がかなり多く驚いたが、どうも神社がそういう人むけらしい。。。&lt;/p&gt;
&lt;p&gt;七代の滝までの下りがきつかったのか、ふくらはぎが筋肉痛。。。膝はそこまでひどくないからスクワットと同時に
ふくらはぎの筋トレも少し取り入れていきたい。&lt;/p&gt;
&lt;p&gt;11月後半には高尾山か大山に登る予定。そこまでに筋トレをしておくようにする。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;ランニング&lt;/h2&gt;
&lt;p&gt;登山で筋肉痛なので、11月入ってからできてない。。。&lt;/p&gt;
&lt;p&gt;10月は結構回数はやったが、距離はあまり走っていなかったので、月間65km程度だった。&lt;/p&gt;
&lt;p&gt;11月は80km程度、目標は100kmまで伸ばしていきたい。&lt;/p&gt;
&lt;p&gt;あと12月は大会に出よう。10km60分切りが目標。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;その他&lt;/h2&gt;
&lt;p&gt;今、色々自分の生活とか行動とかを変えてきている。&lt;/p&gt;
&lt;p&gt;それがいいか悪いかはまだわからないが、運動や勉強を以前よりしているのでよくはなっていると感じている。&lt;/p&gt;
&lt;p&gt;何事も継続するのが大事というのはよくわかっているのでこれがどこまで続くのか記録をつけていきたいと思う。&lt;/p&gt;
&lt;p&gt;あと池袋二郎に行った来たので成果&lt;/p&gt;
&lt;img alt="screenshot" src="https://lh3.googleusercontent.com/g0iyLy2IWdRM2MGcNaL2lxoJvXEWOzm3uONwODSy6ehgT6EhYX-vk_oBKMhVx4ErS9ZSnXiJDv79ftSDuS8cpoNx_VsePzpUmFahmmytNYL74lUiFCxNwbGZS3X0ynib7WEt23d81O7nHavq7GPmNCv_Hkp9pwjvf6j1rpUA6kFQU34RwpSdmg2e-xvfUDYSqlZ2j5DFKs1i5ocLF9KsNIssQI0zloAvBaKinrLBSKfo6L10m56JZ5vQAwHjohH9iwsUazUf504ckOQCWGF2T77uLLRnXN6I3rrj9JYlYjn1Uxn65_QWLe7zQfNqKFzkhatVKJhBEfDN2CAOWvPAzBdLCen1QpEz2cvdSDkVotaM74iktzhwRYD4LzUcRY8vTMSpZslLdmWAcpbSDPnuotcNcIW0roskCRi4C4-kTzkWvEWo-b74omzT4T8pRJyPNFO5el4MiglZc7oEx_xiEYbyaWyAxWF4oCYO8bJnPq4DWK6KSlwEJVPBNfm3QTbDE6OKSpt_ap6gRl5PxC3mWsUm9eFA6DzBW7mM8p2jdTg=w1224-h688-no" /&gt;
&lt;/div&gt;
</summary><category term="memo"></category></entry><entry><title>cmakeのメモ</title><link href="http://float1251.github.io/blog/2015/10/27/cmake.html" rel="alternate"></link><updated>2015-10-27T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-10-27:blog/2015/10/27/cmake.html</id><summary type="html">&lt;p&gt;make使っていたが、さすがに手間だと感じているので、cmakeにしてみる。&lt;/p&gt;
&lt;p&gt;build周りは出来るだけモダンな状態にしておきたいからね。&lt;/p&gt;
&lt;p&gt;とりあえず、&lt;a class="reference external" href="http://www.wakayama-u.ac.jp/~chen/cmake/cmake.html"&gt;http://www.wakayama-u.ac.jp/~chen/cmake/cmake.html&lt;/a&gt; をやって理解しようかと思う。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;ビルド方法&lt;/h2&gt;
&lt;p&gt;プロジェクトにCMakeLists.txtを作成する。&lt;/p&gt;
&lt;p&gt;prog1.cppというファイルをビルドするだけなら以下のような内容とする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cmake_minimum_required &lt;span class="o"&gt;(&lt;/span&gt;VERSION 2.6&lt;span class="o"&gt;)&lt;/span&gt;
project &lt;span class="o"&gt;(&lt;/span&gt;prog1&lt;span class="o"&gt;)&lt;/span&gt;
add_executable &lt;span class="o"&gt;(&lt;/span&gt;prog1 prog1.cpp&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その後以下のコマンドで実行ファイルが作成, 実行できる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cmake . // Makefileを作成する
make    // buildする
./prog1 // 実行する
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="cpp"></category></entry><entry><title>2015-10-07</title><link href="http://float1251.github.io/blog/2015/10/07/2015_10_07.html" rel="alternate"></link><updated>2015-10-07T09:54:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-10-07:blog/2015/10/07/2015_10_07.html</id><summary type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;近況&lt;/h2&gt;
&lt;p&gt;とりあえず大きな出来事があって、ショックが大きかったがとりあえずは落ち着いてきた。。。ような気がする。&lt;/p&gt;
&lt;p&gt;やっと仕事にも集中できるようになったし、食事も義務的にだがちゃんと取れるようになってきた。&lt;/p&gt;
&lt;p&gt;とりあえず、行動しよう。いろんなとこにいって、いろんなことしよう。&lt;/p&gt;
&lt;p&gt;今はそれがいい。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;自作ゲームエンジンについて&lt;/h2&gt;
&lt;p&gt;これに関しては、エンジン部分をc++で作ってwrapperをpythonで書くという手法で行くのがいい気がする。&lt;/p&gt;
&lt;p&gt;が、自分はc++全然やったことないから絶対つまるという問題点が。。。&lt;/p&gt;
&lt;p&gt;あと問題点として&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pythonを使用してandroidを動かす仕組み。python-for-androidでなんとかなるのか&lt;/li&gt;
&lt;li&gt;パフォーマンス的に大丈夫か&lt;/li&gt;
&lt;li&gt;OpenGL周りの知識&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;あたりがネックになるはず。OpenGLは前よりかは大丈夫だけど、カメラまわりの行列計算が糞面倒なのがなぁ。。。&lt;/p&gt;
&lt;p&gt;今年中に目処は付けたいところ。&lt;/p&gt;
&lt;p&gt;あとC++でのビルド環境構築もメンドイなぁ。。。というかこれはやったことがないからか。&lt;/p&gt;
&lt;p&gt;cocos2d-xがcmakeだからcmakeでいくのがいい気がする。&lt;/p&gt;
&lt;p&gt;build環境はcocos-2d-xを参考に作ろう。&lt;/p&gt;
&lt;p&gt;実装はlibgdxを参考に作ろう。&lt;/p&gt;
&lt;p&gt;python &amp;lt;--&amp;gt; C++の連携を楽にするためにどうするかは後々検討。&lt;/p&gt;
&lt;p&gt;cythonもどこかでつかうかもしれんな。。。&lt;/p&gt;
&lt;p&gt;何か色々技術的なつまりどころが多すぎるな。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;自作ゲームについて&lt;/h2&gt;
&lt;p&gt;タワーディフェンス系のゲームを作っていたが、試作で打ち切り予定。&lt;/p&gt;
&lt;p&gt;とりあえず出来ることはわかったというところと、仕様が不明瞭なため。&lt;/p&gt;
&lt;p&gt;何か作るにしても出口、目標をはっきりさせてからやらないと駄目だと非常に感じた。&lt;/p&gt;
&lt;p&gt;次は、ラインディフェンス系のゲームかな。&lt;/p&gt;
&lt;p&gt;ちゃんと仕様を固めて、あとUIの仕様を固めて実装するようにしよう。&lt;/p&gt;
&lt;p&gt;目標はまずは技術検証。面白かったら一旦バラして製作に移る。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;デッキ型のカードUI&lt;/li&gt;
&lt;li&gt;スペル、マナ、ユニットの組み合わせ&lt;/li&gt;
&lt;li&gt;スペルは全Unitへの攻撃と一定時間コインが早く溜まる、攻撃力2倍とかにする&lt;/li&gt;
&lt;li&gt;マナはコインの溜まる速度が上がる&lt;/li&gt;
&lt;li&gt;Unitは通常のUnit&lt;/li&gt;
&lt;li&gt;Title -&amp;gt; Menu -&amp;gt; Game -&amp;gt; Clear画面くらいの一連のシーケンスを作る&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;こんなんでやろう！&lt;/p&gt;
&lt;/div&gt;
</summary><category term="memo"></category></entry><entry><title>雑記 2015-09-29</title><link href="http://float1251.github.io/blog/2015/09/29/memo_2015_09_29.html" rel="alternate"></link><updated>2015-09-29T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-09-29:blog/2015/09/29/memo_2015_09_29.html</id><summary type="html">&lt;p&gt;なんとなくここ最近、もやもやしたものを抱えていて開発が滞っている。。。&lt;/p&gt;
&lt;p&gt;結局この開発しているゲームの出口、終わりがちょっと不明瞭なのが原因な気がしている。&lt;/p&gt;
&lt;p&gt;あとUnityで開発していると低レベルな部分が隠蔽されているから知識があまり身につかない、ただ実装しているだけって感じになっているのがよくないかも。&lt;/p&gt;
&lt;p&gt;試作だから何がしかのEditorとかつくるって感じでもないし。。。&lt;/p&gt;
&lt;p&gt;試作レベルで身につくUnityの知識はだいぶ身についたからちゃんとエフェクトとかUIとか作りこむ時間とお金が欲しいです。。。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;strong&gt;出口を決めてから実装を始める&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;これ大事。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;追記&lt;/h3&gt;
&lt;p&gt;記事にコメント入れられるようにしようとしたらdisquis.htmlのtemplateがbluepenguinにない、pagenationの設定につまづく、&lt;/p&gt;
&lt;p&gt;微妙にデザインが。。。という辺りを修正したい。自分でテーマを作るしかないのかな…&lt;/p&gt;
&lt;p&gt;ちょっとdribbbleとか他のサイトをみて、イメージを固めたいところ。&lt;/p&gt;
&lt;p&gt;あとrst用のtemplate作成スクリプトを作りたい。jinja2とpythonでやれればいいかな。&lt;/p&gt;
&lt;p&gt;requirementsにjinja2はあるからそれでやれればいいかな。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="memo"></category></entry><entry><title>やっと7000超えた</title><link href="http://float1251.github.io/blog/2015/09/15/heroes_chages_1.html" rel="alternate"></link><updated>2015-09-15T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-09-15:blog/2015/09/15/heroes_chages_1.html</id><summary type="html">&lt;p&gt;ヒロチャ、やっと7000突破した。&lt;/p&gt;
&lt;img alt="screen shot" src="http://float1251.github.io/blog/images/Screenshot_2015-09-15-10-02-33.png" /&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;この記事書いてて詰まったとこ&lt;/h2&gt;
&lt;p&gt;rstでのimageの書き方.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;image&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; {filename}../images/aaa.png
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような書き方でないとimageのpathがうまい具合に解決してくれない。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Game"></category><category term="ヒロチャ"></category></entry><entry><title>心機一転、テーマを変えてみた</title><link href="http://float1251.github.io/blog/2015/09/14/theme_change_2015.html" rel="alternate"></link><updated>2015-09-14T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-09-14:blog/2015/09/14/theme_change_2015.html</id><summary type="html">&lt;p&gt;更新をサボっていたが再開しようかと思ったので、&lt;/p&gt;
&lt;p&gt;心機一転、themeを変えてみた。&lt;/p&gt;
&lt;p&gt;windowsだと&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make serve
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;がErrorになる。なので、make htmlしてからoutputのディレクトリにcdして&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m SimpleHTTPServer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;でlocalserverを起動して確認した。&lt;/p&gt;
&lt;p&gt;テーマは &lt;a class="reference external" href="https://github.com/jody-frankowski/blue-penguin"&gt;blue-penguine&lt;/a&gt; にした。&lt;/p&gt;
&lt;p&gt;久しぶりにrstで書くと細かい記法を忘れてて戸惑いを隠せない。&lt;/p&gt;
</summary><category term="pelican"></category></entry><entry><title>libgdxでuniversal tween engine使ってみた</title><link href="http://float1251.github.io/blog/2015/03/03/universal_tween_engine.html" rel="alternate"></link><updated>2015-03-03T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-03-03:blog/2015/03/03/universal_tween_engine.html</id><summary type="html">&lt;p&gt;Tweenアニメーションの実装に、universal tween engineというライブラリを使ったみた。&lt;/p&gt;
&lt;p&gt;導入はlibgdxのwikiにあった。urlは以下の通り。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://github.com/libgdx/libgdx/wiki/Universal-Tween-Engine"&gt;https://github.com/libgdx/libgdx/wiki/Universal-Tween-Engine&lt;/a&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;jarをtween engineの公式から落とす&lt;/li&gt;
&lt;li&gt;projectのrootにlibsディレクトリを作成して、そこにjarを入れる&lt;/li&gt;
&lt;li&gt;gradleの設定を変更する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;実装は以下のような感じでやった。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Accessorを定義する。&lt;/li&gt;
&lt;li&gt;アニメーションを定義する&lt;/li&gt;
&lt;li&gt;renderでmanagerをupdateする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;サンプルはなくしちゃった。。。(´；ω；｀)&lt;/p&gt;
</summary><category term="java"></category><category term="libgdx"></category></entry><entry><title>codeforcesのテストコードを自動生成するツールつくった</title><link href="http://float1251.github.io/blog/2015/01/03/codeforces_tools.html" rel="alternate"></link><updated>2015-01-03T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2015-01-03:blog/2015/01/03/codeforces_tools.html</id><summary type="html">&lt;p&gt;ただし、まだ未公開。&lt;/p&gt;
&lt;p&gt;今はテストがunittest.mockで確認してるんだけど、subprocessでstdoutを確認するほうがよさそう。&lt;/p&gt;
&lt;p&gt;理由は&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;if __name__  で分岐しないとimport時に実行されてしまう。&lt;/li&gt;
&lt;li&gt;mockでbuiltins.printを入れ替えてるが、実装中のデバッグプリントをsys.stderr.writeとか
別なのでやんないと出力されなくなってしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;あたりかな。&lt;/p&gt;
&lt;p&gt;ただ、mockの使い方を学びたいからやってみたって面が多いので、とりあえずよしとしよう。&lt;/p&gt;
&lt;p&gt;テストスクリプトの作成はJinja2をつかってやってます。&lt;/p&gt;
&lt;p&gt;依存するのはそれくらいかな。&lt;/p&gt;
&lt;p&gt;もうちょっと手直しをしたらgithubに上げる予定。&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>pythonでsocketプログラミングをやってみる</title><link href="http://float1251.github.io/blog/2014/12/15/python_socket_learning.html" rel="alternate"></link><updated>2014-12-15T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2014-12-15:blog/2014/12/15/python_socket_learning.html</id><summary type="html">&lt;p&gt;pythonでsocketプログラミングをやってみる。&lt;/p&gt;
&lt;p&gt;とりあえず簡単なTCPクライントとServerを作成する。&lt;/p&gt;
&lt;p&gt;使用するのはpython3.3.5.&lt;/p&gt;
&lt;p&gt;ここあたりはとりあえず読んでおく。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python.jp/3.3/howto/sockets.html"&gt;http://docs.python.jp/3.3/howto/sockets.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;client側コード&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;target_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;target_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;

&lt;span class="c"&gt;# create socket object&lt;/span&gt;
&lt;span class="c"&gt;# AF_INET -&amp;gt; ipv4を使います&lt;/span&gt;
&lt;span class="c"&gt;# SOCK_STREAM -&amp;gt; tcpを使います&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;target_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# strではなくbyteを渡す&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;server側コード&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socketserver&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTCPHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socketserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BaseRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    socket server request handler&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;request Started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# self.rquest is TCP socket connected to the client&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{} worte:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_address&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# just send back the same data, but upper-cased&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;request finished&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socketserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;MyTCPHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでサーバーを起動してからクライントを実行すればよい。&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>pelicanのthemeについて</title><link href="http://float1251.github.io/blog/2014/12/09/pelican_themes.html" rel="alternate"></link><updated>2014-12-09T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2014-12-09:blog/2014/12/09/pelican_themes.html</id><summary type="html">&lt;p&gt;色々とthemeを変えてみて、いいのがないか探している。&lt;/p&gt;
&lt;p&gt;ただなかなかいいのが見当たらない。。。&lt;/p&gt;
&lt;p&gt;あと、previewとかがないのがあるから、どういった感じのthemeなのかわからないものが多い。&lt;/p&gt;
&lt;p&gt;微妙に機能が足りてないのとかもあるから、自分でカスタムするしかないかも。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;https://github.com/getpelican/pelican-themes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;とりあえずforkしてmonospaceあたりを自分なりにカスタマイズするのがよさげって思った。&lt;/p&gt;
</summary><category term="pelican"></category><category term="python"></category></entry><entry><title>TOEICを受けました</title><link href="http://float1251.github.io/blog/2014/09/29/toeic_0929.html" rel="alternate"></link><updated>2014-09-29T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2014-09-29:blog/2014/09/29/toeic_0929.html</id><summary type="html">&lt;p&gt;会社でTOEICを受けたので感想を残しておこうと思う。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;リスニングが絶望的にできない。聞き取れないのもあるが単語がわからん。&lt;/li&gt;
&lt;li&gt;文法問題が微妙。。。テクニック的なのも忘れてるし。&lt;/li&gt;
&lt;li&gt;リーディングは結構解けた気がする。読むスピードはお察しだが。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;とりあえず、CD聞きながら単語帳やっていこうと思いました。&lt;/p&gt;
&lt;p&gt;また3ヶ月後くらいに受けないとあかんらしいです。&lt;/p&gt;
&lt;p&gt;点数わかったら追記しようと思います。&lt;/p&gt;
</summary></entry><entry><title>blogをpelicanに移行しました</title><link href="http://float1251.github.io/blog/2014/09/22/move_to_pelican.html" rel="alternate"></link><updated>2014-09-22T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2014-09-22:blog/2014/09/22/move_to_pelican.html</id><summary type="html">&lt;p&gt;blogをpelicanに移行しました。&lt;/p&gt;
&lt;p&gt;bloggerだとなんとなく書く気にならなかったので。&lt;/p&gt;
&lt;p&gt;github pageを使ってます。&lt;/p&gt;
&lt;p&gt;ドキュメントはひたすらに読みました。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.4.0/"&gt;http://docs.getpelican.com/en/3.4.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;あとここは参考にしました。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://openjerseycity.org/blog/technical/2014/06/20/Pelican-On-GitHub-Pages/"&gt;http://openjerseycity.org/blog/technical/2014/06/20/Pelican-On-GitHub-Pages/&lt;/a&gt;&lt;/p&gt;
</summary><category term="python"></category><category term="pelican"></category></entry><entry><title>Googleの画像検索APIを使ってみる</title><link href="http://float1251.github.io/blog/2014/06/02/google_image_search.html" rel="alternate"></link><updated>2014-06-02T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2014-06-02:blog/2014/06/02/google_image_search.html</id><summary type="html">&lt;p&gt;現在はCustom Search APIを使用する。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/custom-search/json-api/v1/overview?hl=ja"&gt;https://developers.google.com/custom-search/json-api/v1/overview?hl=ja&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;データ型&lt;/h2&gt;
&lt;p&gt;JSONかAtomで返ってくる模様。&lt;/p&gt;
&lt;p&gt;Atomで取得する際はqueryにalt=atomとつける。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;価格&lt;/h2&gt;
&lt;p&gt;Freeのやつと有料のやつがある。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Custom Search Engine&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;100 requests/dayで無料。Cloud Consoleでbilingを有効化すれば、$5/1000 requestsで買える。制限は10kquery/dayらしい&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Google Site Search&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;有料版。詳細はここで。
&lt;a class="reference external" href="http://www.google.com/enterprise/search/products/gss.html#pricing_content"&gt;http://www.google.com/enterprise/search/products/gss.html#pricing_content&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="api-key"&gt;
&lt;h2&gt;API KEY&lt;/h2&gt;
&lt;p&gt;管理コンソールから取得してくる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-search-engine"&gt;
&lt;h2&gt;Custom Search Engine&lt;/h2&gt;
&lt;p&gt;Custom Search Engine IDというものが必要らしい。&lt;/p&gt;
&lt;p&gt;最初に設定するとき、対象のURLを入力するとあって、
全体を対象にするにはどうすればいいのかわからなかったが、&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ryutamaki.hatenablog.com/entry/2014/01/18/171640"&gt;http://ryutamaki.hatenablog.com/entry/2014/01/18/171640&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これ見て設定したらうまくいった。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-search-api"&gt;
&lt;h2&gt;Custom Search apiの使い方&lt;/h2&gt;
&lt;p&gt;ここ見ればわかる。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/custom-search/json-api/v1/using_rest?hl=ja"&gt;https://developers.google.com/custom-search/json-api/v1/using_rest?hl=ja&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;URLフォーマットは以下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://www.googleapis.com/customsearch/v1?{parameters}
&lt;/pre&gt;
&lt;p&gt;必須パラメータは以下3つ&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;API Key&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;管理コンソールで取得したAPI Key&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Custom Search Engine ID&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Custom Search Engineで作成したEngine Id
今回はcxで渡せば良い模様。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Search Query&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;検索ワードを渡せばおｋ．&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;その他のquery parameterはここ見ましょう。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/custom-search/json-api/v1/reference/cse/list?hl=ja#request"&gt;https://developers.google.com/custom-search/json-api/v1/reference/cse/list?hl=ja#request&lt;/a&gt;
&lt;a class="reference external" href="https://developers.google.com/custom-search/json-api/v1/using_rest?hl=ja#api-specific_query_parameters"&gt;https://developers.google.com/custom-search/json-api/v1/using_rest?hl=ja#api-specific_query_parameters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;とりあえず今回は画像検索だからsearchTypeにimageを設定する必要があるらしい。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="response"&gt;
&lt;h2&gt;response形式&lt;/h2&gt;
&lt;p&gt;以下を参照。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/custom-search/json-api/v1/reference/cse/list?hl=ja#response"&gt;https://developers.google.com/custom-search/json-api/v1/reference/cse/list?hl=ja#response&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;画像のリンクはitems.linkのURLを見ればいいらしい。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Cordovaでandroidにアプリをinstallする</title><link href="http://float1251.github.io/blog/2014/05/24/cordova_anroid.html" rel="alternate"></link><updated>2014-05-24T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2014-05-24:blog/2014/05/24/cordova_anroid.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境設定&lt;/h2&gt;
&lt;p&gt;手順はhttps://github.com/MobileChromeApps/mobile-chrome-apps/blob/master/README.mdにある。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;androidSDKをインストールする。&lt;/li&gt;
&lt;li&gt;.bash_profileにsdk/toolsとsdk/platform-toolsにpathを通す&lt;/li&gt;
&lt;li&gt;brew install antでantを入れる。入らなかったらbrew updateしてから再度行う&lt;/li&gt;
&lt;li&gt;npm install -g cca&lt;/li&gt;
&lt;li&gt;cca checkenvで怒られないことを確認&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="project"&gt;
&lt;h2&gt;Projectの作成&lt;/h2&gt;
&lt;p&gt;以下のコマンドを実行する&lt;/p&gt;
&lt;blockquote&gt;
cca create APP_NAME&lt;/blockquote&gt;
&lt;!-- Error: Cannot find module 'cordova/platforms'
と怒られたが、- -androidとつけてcreateして解決。
iosの設定はやってないからなんか足りんかったんだろう。 --&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;実行&lt;/h2&gt;
&lt;p&gt;作成したプロジェクトディレクトリで以下を実行&lt;/p&gt;
&lt;blockquote&gt;
cca run android&lt;/blockquote&gt;
&lt;p&gt;これでアプリがdeviceにインストールされる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;プロジェクトの構造&lt;/h2&gt;
&lt;p&gt;以下のような形になっている。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.
├── config.xml
├── hooks
│&amp;nbsp;&amp;nbsp; ├── README.md
│&amp;nbsp;&amp;nbsp; ├── after_prepare
│&amp;nbsp;&amp;nbsp; └── before_prepare
├── merges
│&amp;nbsp;&amp;nbsp; └── android
├── platforms
│&amp;nbsp;&amp;nbsp; └── android
├── plugins
│&amp;nbsp;&amp;nbsp; ├── android.json
│&amp;nbsp;&amp;nbsp; ├── org.apache.cordova.file
│&amp;nbsp;&amp;nbsp; ├── org.apache.cordova.inappbrowser
│&amp;nbsp;&amp;nbsp; ├── org.apache.cordova.keyboard
│&amp;nbsp;&amp;nbsp; ├── org.apache.cordova.network-information
│&amp;nbsp;&amp;nbsp; ├── org.apache.cordova.statusbar
│&amp;nbsp;&amp;nbsp; ├── org.chromium.bootstrap
│&amp;nbsp;&amp;nbsp; ├── org.chromium.common
│&amp;nbsp;&amp;nbsp; ├── org.chromium.i18n
│&amp;nbsp;&amp;nbsp; ├── org.chromium.navigation
│&amp;nbsp;&amp;nbsp; ├── org.chromium.polyfill.CustomEvent
│&amp;nbsp;&amp;nbsp; ├── org.chromium.polyfill.blob_constructor
│&amp;nbsp;&amp;nbsp; ├── org.chromium.polyfill.xhr_features
│&amp;nbsp;&amp;nbsp; ├── org.chromium.runtime
│&amp;nbsp;&amp;nbsp; └── org.chromium.storage
└── www
    ├── assets
    ├── background.js
    ├── index.css
    ├── index.html
    ├── manifest.json
    └── manifest.mobile.json
&lt;/pre&gt;
&lt;p&gt;www以下がwebviewで使用されるファイル。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="chrome"></category><category term="android"></category><category term="cordova"></category></entry><entry><title>vimscriptについて</title><link href="http://float1251.github.io/blog/2014/05/11/vimscript.html" rel="alternate"></link><updated>2014-05-11T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2014-05-11:blog/2014/05/11/vimscript.html</id><summary type="html">&lt;p&gt;vim pluginを開発したいと考えているが、まずはvimscriptについて知らないといけない。&lt;/p&gt;
&lt;p&gt;ということでちょっと調べてみた。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mattn.kaoriya.net/software/vim/20111202085236.htm"&gt;http://mattn.kaoriya.net/software/vim/20111202085236.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この記事が素晴らしすぎたので、こっちを読むとよいと思います。&lt;/p&gt;
&lt;p&gt;あとこことか&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://vim-users.jp/2010/04/hack136/"&gt;http://vim-users.jp/2010/04/hack136/&lt;/a&gt;
&lt;a class="reference external" href="http://vim-jp.org/tips/start_vimscript.html"&gt;http://vim-jp.org/tips/start_vimscript.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;とりあえず、備忘録的にやったことを残しておこうと思います。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;変数宣言&lt;/h2&gt;
&lt;p&gt;こんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;quot; 数値&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; foo &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 文字列&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; foo &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; リスト&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; foo &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;]
&lt;span class="c"&gt;&amp;quot; 辞書&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; foo &lt;span class="p"&gt;=&lt;/span&gt; {&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;関数定義&lt;/h2&gt;
&lt;p&gt;こんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt; Foo&lt;span class="p"&gt;()&lt;/span&gt;
    echo &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コマンドラインから実行すると以下のようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; Foo&lt;span class="p"&gt;()&lt;/span&gt;
foo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同じ関数名を定義するにはfunction!を指定する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; Foo&lt;span class="p"&gt;()&lt;/span&gt;
    echo &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;スコープ&lt;/h2&gt;
&lt;p&gt;関数内で有効なローカルスコープ l:、スクリプトファイル内で有効なスコープ s:、グローバルで有効なスコープ、
がよく使う。&lt;/p&gt;
&lt;p&gt;こんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:Foo&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:foo &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
    echo foo
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; s:Foo&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Pythonインターフェース&lt;/h2&gt;
&lt;p&gt;vimscriptではPythonを使用することが出来ます。&lt;/p&gt;
&lt;p&gt;まずは使用できるかどうかの確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;

echo has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;であればpython2もpython3も両方使えます。&lt;/p&gt;
&lt;p&gt;ではvimscriptで実際にpythonを使用してみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:Foo&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;python3&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;lt;&lt;/span&gt; EOM
print&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
EOM
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; s:Foo&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような形で使用します。&lt;/p&gt;
&lt;p&gt;外部ファイルを実行する際は:pyfileコマンドを使用します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="map"&gt;
&lt;h2&gt;map&lt;/h2&gt;
&lt;p&gt;基本的なコマンドについては知っているので割愛。&lt;/p&gt;
&lt;p&gt;インサートモードにおいて、関数の評価結果から入力文字列を挿入させるためには&amp;lt;expr&amp;gt;を使用する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Foo&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="command"&gt;
&lt;h2&gt;command&lt;/h2&gt;
&lt;p&gt;コマンドモードから実行できるコマンドを定義する。&lt;/p&gt;
&lt;p&gt;名前の戦闘は大文字である必要がある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;command&lt;span class="p"&gt;!&lt;/span&gt; Foo :&lt;span class="k"&gt;call&lt;/span&gt; Foo&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;詳しくは help :command-args を参照。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="autoloadautocmd"&gt;
&lt;h2&gt;autoloadとautocmd&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mattn.kaoriya.net/software/vim/20111202085236.htm"&gt;http://mattn.kaoriya.net/software/vim/20111202085236.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここ見たほうがよいです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;vimscriptの組み込み関数&lt;/h2&gt;
&lt;p&gt;機能別に分類してあるヘルプは以下で見れる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;help &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;アルファベット順は以下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;help functions
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということで最後の方はだいぶ適当になったけど、これで最低限vimscriptが読めるようになった気がします。&lt;/p&gt;
&lt;p&gt;あとは色々見たり作ったりしながら覚えていこうかと思います。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="vim"></category></entry><entry><title>vimscriptを書いてて、詰まったところ</title><link href="http://float1251.github.io/blog/2014/05/11/vimscript_memo.html" rel="alternate"></link><updated>2014-05-11T00:00:00+09:00</updated><author><name>float1251</name></author><id>tag:float1251.github.io,2014-05-11:blog/2014/05/11/vimscript_memo.html</id><summary type="html">&lt;div class="section" id="pyfile"&gt;
&lt;h2&gt;pyfileで引数を渡す方法&lt;/h2&gt;
&lt;p&gt;pythonであれば&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python sample.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という形で実行するがvimではpyfileでpythonファイルを実行できるが、以下の様なやり方ではダメ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pyfile sample.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こうではなく、以下の様にして引数を渡す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;python&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; pythonではsys.argvの0番目はスクリプトのファイル名&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;python&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sample.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;pyfile&lt;/span&gt; sample.&lt;span class="k"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こうすると想定どおりに引数がpython側で受け取れる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pythonvim"&gt;
&lt;h2&gt;python側でvimで定義した変数を受け取る&lt;/h2&gt;
&lt;p&gt;vimscriptの変数をpython側で受け取るにはvim.evalを使用する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; tmp &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;python&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; EOM
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;vim&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tmp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
EOM
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vim"&gt;
&lt;h2&gt;vimでの文字列連結&lt;/h2&gt;
&lt;p&gt;文字列連結でつい&amp;quot;sample&amp;quot;+&amp;quot;test&amp;quot;とか書きがちだが、.(ドット)でつなげる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sample&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
echo &lt;span class="k"&gt;a&lt;/span&gt;.&lt;span class="k"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="command"&gt;
&lt;h2&gt;ユーザ定義commandの引数を関数に渡す&lt;/h2&gt;
&lt;p&gt;&amp;lt;f-args&amp;gt;を使う。&lt;/p&gt;
&lt;p&gt;詳細は:h &amp;lt;f-args&amp;gt;で。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gvim"&gt;
&lt;h2&gt;Gvimかどうかの判定&lt;/h2&gt;
&lt;p&gt;has(&amp;quot;gui_running&amp;quot;)でできる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gui_running&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じかな。
vimpluginを書くときはまず、:h vim-scriptと:h write-pluginあたりを読むほうがその後が楽だなと思った。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="vim"></category></entry></feed>